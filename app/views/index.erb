<style>
  .main .folder {
    margin-left: 10px;
  }
  .list-group-item {
    cursor: pointer;
  }

  .list-group-item > .list-group {
    display: none;
  }

  .open > .list-group {
    display: block;
  }
  .code-reader {
    background-color: #161b22;
  }
</style>
<h1 class="mt-4">Структура проєкту</h1>
<div class="row">
  <div class="col-4">
    <div class="row">
      <div class="col-6">
        <button class="my-3 w-100 btn btn-secondary select-all">Вибрати усі файли</button>
      </div>
      <div class="col-6">
        <button class="my-3 w-100 btn btn-success generate-doc disabled">Генерувати</button>
      </div>
    </div>
  </div>
  <div class="col-8"><button class="my-3 w-100 btn btn-danger edit-doc d-none">Генерувати</button></div>
</div>
<div class="row min-vh-100">
  <div class="col-4">
      <%= @directory_structure %>
  </div>
  <div class="col-8 py-3 rounded code-reader">
    <zero-md>
      <script type="text/markdown" id='file-reader'>
        # **This** is my [markdown](https://example.com)
      </script>
    </zero-md>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const folders = document.querySelectorAll('.folder');
    const files = document.querySelectorAll('.file');
    const selectFile = document.querySelectorAll('.add-file');
    const selectFolder = document.querySelectorAll('.add-folder');
    const selectAllButton = document.querySelector('.select-all');
    const generateDocBtn = document.querySelector('.generate-doc');

    folders.forEach(folder => {
      folder.addEventListener('click', e => {
        e.stopPropagation();
        if(e.target.classList.contains('folder')){
          e.target.classList.toggle('open');
        }
      });
    });
    selectFile.forEach(file => {
      file.addEventListener('click', () => {
        file.parentNode.classList.toggle('active');
        enabledGenarateBtn(files);
      });
    });

    selectFolder.forEach(folder => {
      folder.addEventListener('click', e => {
        if(folder.parentNode.classList.contains('active')) {
          folder.parentNode.classList.remove('active');
          folder.parentNode.querySelectorAll('.file, .folder').forEach(c => c.classList.remove('active'))
        }else{
          folder.parentNode.classList.add('active');
          folder.parentNode.querySelectorAll('.file, .folder').forEach(c => c.classList.add('active'))
        }
        enabledGenarateBtn(files);
      });
    });

    selectAllButton.addEventListener('click', e => {
      document.querySelectorAll('.file, .folder').forEach(c => {
        !c.classList.contains('active') ? c.classList.add('active') : null;
        enabledGenarateBtn(files);
      });
    });

    files.forEach(file => {
      file.addEventListener('click', e => {
        if(!e.target.classList.contains('file')){
          return;
        }
        filePath = e.target.dataset.filePath
        fetch('/get_documentation?file_path='+filePath)
          .then(response => response.json())
          .then(data => {
              document.getElementById('file-reader').innerHTML = data['file'];
              // e.target.classList.add('bg-secondary');
            });
      });
    });

    function enabledGenarateBtn() {
      if (document.querySelectorAll('.file.active').length > 0) {
        generateDocBtn.classList.remove('disabled');
      } else {
        generateDocBtn.classList.add('disabled');
      }
    }

    generateDocBtn.addEventListener('click', e => {
      selectFilesPath = Array.from(document.querySelectorAll('.file.active')).map(e => e.dataset.filePath);
      fetch('/generate_doc', { headers: { "Content-Type": "application/json" }, method: 'POST', body: JSON.stringify(selectFilesPath)});
    });
  });

</script>
